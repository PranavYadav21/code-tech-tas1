#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_ARGS 10

void executeCommand(char *command) {
    char *args[MAX_ARGS];
    int i = 0;

    // Split the command into arguments
    args[i] = strtok(command, " ");
    while (args[i] != NULL && i < MAX_ARGS - 1) {
        i++;
        args[i] = strtok(NULL, " ");
    }
    args[i] = NULL; // Last argument should be NULL for execvp

    // Fork a process to execute the command
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        // Child process - execute the command
        execvp(args[0], args);
        perror("Exec failed");
        exit(1);
    } else {
        // Parent process - wait for the child to finish
        wait(NULL);
    }
}

int main() {
    char command[MAX_COMMAND_LENGTH];

    while (1) {
        printf("mini-shell> ");
        fgets(command, MAX_COMMAND_LENGTH, stdin);

        // Remove the newline character from the input
        command[strcspn(command, "\n")] = 0;

        // Exit the shell if the user types "exit"
        if (strcmp(command, "exit") == 0) {
            break;
        }

        // Execute the command
        executeCommand(command);
    }

    return 0;
}
